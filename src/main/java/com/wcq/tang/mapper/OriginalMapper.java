package com.wcq.tang.mapper;

import com.wcq.tang.model.Original;
import com.wcq.tang.model.OriginalExample;
import java.util.List;
import org.apache.ibatis.annotations.Param;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.cache.annotation.Caching;

public interface OriginalMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table original
     *
     * @mbg.generated Sun Mar 15 15:31:58 CST 2020
     */
    long countByExample(OriginalExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table original
     *
     * @mbg.generated Sun Mar 15 15:31:58 CST 2020
     */
    @CacheEvict(cacheNames = {"oria","oriu"},allEntries = true)
    int deleteByExample(OriginalExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table original
     *
     * @mbg.generated Sun Mar 15 15:31:58 CST 2020
     */
    @Caching(evict = {
            @CacheEvict(cacheNames = {"oria","oriu"},allEntries = true),
            @CacheEvict(cacheNames = "ori",key = "#originalId")
    })
    int deleteByPrimaryKey(Long originalId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table original
     *
     * @mbg.generated Sun Mar 15 15:31:58 CST 2020
     */
    @CacheEvict(cacheNames = {"oria","oriu"},allEntries = true)
    int insert(Original record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table original
     *
     * @mbg.generated Sun Mar 15 15:31:58 CST 2020
     */
    @CacheEvict(cacheNames = {"oria","oriu"},allEntries = true)
    int insertSelective(Original record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table original
     *
     * @mbg.generated Sun Mar 15 15:31:58 CST 2020
     */
    List<Original> selectByExample(OriginalExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table original
     *
     * @mbg.generated Sun Mar 15 15:31:58 CST 2020
     */
    @Cacheable(cacheNames = "ori")
    Original selectByPrimaryKey(Long originalId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table original
     *
     * @mbg.generated Sun Mar 15 15:31:58 CST 2020
     */
    @Caching(evict = {
            @CacheEvict(cacheNames = {"oria","oriu"},allEntries = true),
            @CacheEvict(cacheNames = "ori",allEntries = true)
    })
    int updateByExampleSelective(@Param("record") Original record, @Param("example") OriginalExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table original
     *
     * @mbg.generated Sun Mar 15 15:31:58 CST 2020
     */
    @Caching(evict = {
            @CacheEvict(cacheNames = {"oria","oriu"},allEntries = true),
            @CacheEvict(cacheNames = "ori",allEntries = true)
    })
    int updateByExample(@Param("record") Original record, @Param("example") OriginalExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table original
     *
     * @mbg.generated Sun Mar 15 15:31:58 CST 2020
     */
    @Caching(evict = {
            @CacheEvict(cacheNames = {"oria","oriu"},allEntries = true),
            @CacheEvict(cacheNames = "ori",key = "#record.getOriginalId()")
    })
    int updateByPrimaryKeySelective(Original record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table original
     *
     * @mbg.generated Sun Mar 15 15:31:58 CST 2020
     */
    @Caching(evict = {
            @CacheEvict(cacheNames = {"oria","oriu"},allEntries = true),
            @CacheEvict(cacheNames = "ori",key = "#record.getOriginalId()")
    })
    int updateByPrimaryKey(Original record);
    long countTodayOriginals(String dateasstring);
}